/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./app/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  DBType: "MYSQL" | "POSTGRESQL"
  UserRole: "ADMIN" | "OPERATOR" | "ROOT"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  Json: any
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    id: number; // Int!
    user: NexusGenRootTypes['User']; // User!
  }
  Customer: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    slug: string; // String!
  }
  DBCredentials: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    customer?: NexusGenRootTypes['Customer'] | null; // Customer
    host: string; // String!
    id: number; // Int!
    name: string; // String!
    password: string; // String!
    port: string; // String!
    type: NexusGenEnums['DBType']; // DBType!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    username: string; // String!
  }
  Mutation: {};
  Query: {};
  Ticket: { // root type
    context: string; // String!
  }
  User: { // root type
    customer?: NexusGenRootTypes['Customer'] | null; // Customer
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    role: NexusGenEnums['UserRole']; // UserRole!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    id: number; // Int!
    user: NexusGenRootTypes['User']; // User!
  }
  Customer: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    slug: string; // String!
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  DBCredentials: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    customer: NexusGenRootTypes['Customer'] | null; // Customer
    host: string; // String!
    id: number; // Int!
    name: string; // String!
    password: string; // String!
    port: string; // String!
    type: NexusGenEnums['DBType']; // DBType!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    username: string; // String!
  }
  Mutation: { // field return type
    createCustomer: NexusGenRootTypes['Customer']; // Customer!
    createDBCredentials: NexusGenRootTypes['DBCredentials']; // DBCredentials!
    deleteDBCredentials: NexusGenRootTypes['DBCredentials']; // DBCredentials!
    logout: boolean; // Boolean!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  Query: { // field return type
    getAllDBCredentials: NexusGenRootTypes['DBCredentials'][]; // [DBCredentials!]!
    getCustomer: NexusGenRootTypes['Customer']; // Customer!
    getTicketContext: NexusGenRootTypes['Ticket']; // Ticket!
    getUser: NexusGenRootTypes['User']; // User!
    getUsers: NexusGenRootTypes['User'][]; // [User!]!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  Ticket: { // field return type
    context: string; // String!
  }
  User: { // field return type
    customer: NexusGenRootTypes['Customer'] | null; // Customer
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    role: NexusGenEnums['UserRole']; // UserRole!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    id: 'Int'
    user: 'User'
  }
  Customer: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    slug: 'String'
    users: 'User'
  }
  DBCredentials: { // field return type name
    createdAt: 'DateTime'
    customer: 'Customer'
    host: 'String'
    id: 'Int'
    name: 'String'
    password: 'String'
    port: 'String'
    type: 'DBType'
    updatedAt: 'DateTime'
    username: 'String'
  }
  Mutation: { // field return type name
    createCustomer: 'Customer'
    createDBCredentials: 'DBCredentials'
    deleteDBCredentials: 'DBCredentials'
    logout: 'Boolean'
    signup: 'AuthPayload'
  }
  Query: { // field return type name
    getAllDBCredentials: 'DBCredentials'
    getCustomer: 'Customer'
    getTicketContext: 'Ticket'
    getUser: 'User'
    getUsers: 'User'
    login: 'AuthPayload'
  }
  Ticket: { // field return type name
    context: 'String'
  }
  User: { // field return type name
    customer: 'Customer'
    email: 'String'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    role: 'UserRole'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCustomer: { // args
      slug: string; // String!
    }
    createDBCredentials: { // args
      host: string; // String!
      name: string; // String!
      password: string; // String!
      port: string; // String!
      type: NexusGenEnums['DBType']; // DBType!
      username: string; // String!
    }
    deleteDBCredentials: { // args
      id: number; // Int!
    }
    signup: { // args
      customerSlug: string; // String!
      email: string; // String!
      firstName: string; // String!
      lastName: string; // String!
      password: string; // String!
      role?: string | null; // String
    }
  }
  Query: {
    getCustomer: { // args
      slug: string; // String!
    }
    getTicketContext: { // args
      queries: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}